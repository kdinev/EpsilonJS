{"name":"EpsilonJS","tagline":"A JavaScript calculator and an expression parser.","body":"EpsilonJS[![Codacy Badge](https://www.codacy.com/project/badge/3d2d4cba93d94dc59cbbad849f7c9fbe)](https://www.codacy.com/public/kdinev/EpsilonJS)[![Build Status](https://travis-ci.org/kdinev/EpsilonJS.svg?branch=master)](https://travis-ci.org/kdinev/EpsilonJS)\r\n=========\r\n\r\nA JavaScript calculator and an expression parser.\r\n\r\nHow to build EpsilonJS\r\n=========\r\n\r\nClone the repo:\r\n\r\n    git clone https://github.com/kdinev/EpsilonJS.git\r\n    \r\nInstall the grunt client:\r\n\r\n    npm install -g grunt-cli bower\r\n    \r\nGo to the EpsilonJS folder and install dependencies:\r\n\r\n    cd epsilonjs\r\n    npm install\r\n    bower install\r\n    \r\nBuild:\r\n\r\n    grunt default\r\n\r\nDescription\r\n=========\r\n\r\nParses and evaluates mathematical expressions. The expression is provided to the expression parser as a string.\r\n\r\n    var expr = \"1/(2+8)*2\",\r\n        parser = new Epsilon.ExpressionParser(expr);\r\n    parser.evaluate(); // Yeilds 0.2 as a number type\r\n    \r\nSupported operators:\r\n\r\n * Addition (+)\r\n * Subtraction (-)\r\n * Multiplication (*)\r\n * Division (/)\r\n * Negative values (-)\r\n * Brackets (())\r\n\r\nThe epsilon expression parser handles DOM formula references as well. The epsilon expression parser will evaluate all elements containing a `data-formula` attribute. In order to get the DOM evaluated the `Epsilon.epsilon()` method needs to be called after loading the DOM. The references need to be like excel cells (e.g. `A10`, `C2`) and will be looked-up by `id` and by `data-formula-ref` attribute if not found by `id`. The referenced elements can contain and formula and epsilon will evaluate them according to their `data-formula`. Circular references are not handled at this point and will result in out of stack space exception.\r\n\r\nExample:\r\n\r\n    <ul>\r\n        <li id=\"A1\">10</li> <!-- <li data-formula-ref=\"A1\">10</li> -->\r\n        <li data-formula=\"=A1*2\"></li>\r\n    </ul>\r\n    <script type=\"text/javascript\">\r\n        Epsilon.epsilon();\r\n    </script>\r\n    \r\nThe result will be:\r\n\r\n * 10\r\n * 20\r\n\r\nEpsilon can evaluate only specific DOM elements as well and can be invoked at any point for those elements. If the reference elements contain formulas, then their formulas will be evaluated as part of the requested element's formula but their DOM values will not be changed.\r\n\r\nExample:\r\n\r\n    <ul>\r\n        <li id=\"A1\">10</li> <!-- <li data-formula-ref=\"A1\">10</li> -->\r\n        <li id=\"A2\" data-formula=\"=A1*2\"></li>\r\n        <li id=\"A3\" data-formula=\"=A2+5\"></li>\r\n    </ul>\r\n    <script type=\"text/javascript\">\r\n        Epsilon.epsilon(document.getElementById(\"A3\"));\r\n    </script>\r\n\r\nThe result will be:\r\n\r\n * 10\r\n * \r\n * 25\r\n\r\nThere is also a jQuery UI epsilon calculator widget provided by [https://github.com/kdinev/calculatorjs](https://github.com/kdinev/calculatorjs). This widget was created to test the epsilon expression parser. The calculator widget is dependent on jQuery and jQuery UI. In order to use it:\r\n    \r\n    <div id=\"calculator\"></div>\r\n    <script type=\"text/javascript\">\r\n\t\t$(document).ready(function () {\r\n\t\t\t$(\"#calculator\").calculator();\r\n\t\t});\r\n\t</script>\r\n\r\nThe calculator widget is used in a Windows 8.1 store application which you may download and play with here: [http://apps.microsoft.com/windows/app/epsilon-calculator/ec41ebdd-00c6-4654-a2a2-b297a0118a87](http://apps.microsoft.com/windows/app/epsilon-calculator/ec41ebdd-00c6-4654-a2a2-b297a0118a87)\r\n","google":"UA-59892354-1","note":"Don't delete this file! It's used internally to help with page regeneration."}